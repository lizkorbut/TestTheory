		Тестирование требований 
	Требования (requirements) - это подробное изложение функционального наполнения системы.  Должны описывать то, что необходимо заказчику без деталей реализации (принцип “what, not how”).
	В своей основе требования - это то, что формулирует заказчик. Цель, которую он преследует - получить хороший конечный продукт: функциональный и удобный в использовании. 
	Требования бывают прямыми (т. е. формализованными в технической документации, спеках, юзер-стори и прочих формальных артефактах) и косвенными (т. е. проистекающими из прямых, либо являющимися негласным стандартом для данной продукции или основывающиеся на опыте и здравом смысле использования данного продукта или продуктах, подобных ему). Все требования также подразделяются на функциональные (описывающие какие функции должен выполнять продукт) и нефункциональные (требования к окружению, поддерживаемости, надежности и прочим характеристикам продукта). Прямые требования всегда приоритетнее косвенных.

		Уровни требований
1. Бизнес требования (business requirements) - для чего создается ПО, главная цель заказчика.
2. Требования пользователей (User requirements) - “что можно будет делать?” (варианты использования). 
3. Функциональные требования (Functional requirements) - “что конкретно должна выполнять система и как она должна это выполнять?” 

		Типы требований
1. Функциональные. Для пользователя важно, чтобы система выполняла 
определенные действия, при этом пользователь некоторым образом 
взаимодействует с системой, использует ее для своих целей. 
	бизнес-требования (документ об образе и границах проекта)
	требования пользователей (лдокумент о вариантах использования)
	системные требования
	функциональные требования
2. Нефункциональные. К нефункциональным требованиям относят такие 
свойства системы, как: производительность - скорость, пропускная 
способность, время отклика, используемая память; зависимость от 
платформы; расширяемость; надежность и т.д.
	бизнес-правила (НПА, нормы, законы)
	атрибуты качества (надежность, удобство использования)
	внешний интерфейс
	ограничения

		Источники требований
1. Представитель заказчика (Product owner)
2. Product manager
3. Bussiness analyst
4. Technical lead
5. Development lead

		Для чего необходимо тестирование требований?
От качественно сформированных требований зависит качество ПО по итогу. Баги, найденные на этапе тестирования требований, проще и дешевле исправить, чем баги в коде. У команды вырабатывается единое понимание будущего ПО при совместной работе с требованиями.

		Характеристики требований
1. Корректность - требование должно четко описывать, что должно делать ПО, без домыслов "это очевидно".
2. Атомарность - каждое требование должно быть неделимым и завершенным по смыслу, должно описывать только одну ситуацию.
3. Полнота/завершенность - все важны аспекты должны быть прописаны от и до.
4. Однозначность - требования не должны содержать разночтений (особенно касается сокращений).
5. Непротиворечивость - требование не должно содержать как внутри себя противоречий, так и противоречий с другими требованиями.
6. Выполнимость - требование должно быть реальным, в рамках бюджета и технически выполнимым.
7. Тестируемость - каждое требование должно быть сформулировано так, что его можно было проверить.
8. Модифицируемость - сойство требования, которое означает простоту внесения изменений в само требование или в набор требований, изменение не приводит к нарушению иных описанных свойств ПО.
9. Прослеживаемость - у каждого требования должен быть уникальный ID, по которому можно сослаться на требование.

		Багги в требованиях
1. Некорректность - опечатки, ошибки (грамматические, орфографические,
пунктуационные), требования к пользователю, а не к приложению.
2. Незавершенность - отсутсвует составляющие требований или
указана лишь часть какого-то перечисления "поле подсвечивается
зеленым, когда заполнено правильно - как правильно? какие
символы допукаются? какой максимальный размер поля? и т.д.";
"экспорт осуществляется в форматах .doc, .exel и т.д. - что значит и т.д.?"
3. Неатомарность - в одном поле содержится два независимых
требования "если пользователь подтверждает и редактирует заказ или
откладывает заказ, долен выдаваться запрос на оплату".
4. Противоречивость - противоречивость внутри требования или между 
требованиями, использование неверное терминологии "а) кнопка 'exit' 
должна быть красного цвета ... е) после нажатия синей кнопки 'exit' 
приложение закрывается"; "разрешение окна - разрещение есть только у 
дисплея, у окна - размер".
5. Неоднозначность - использование двусмысленных аббревиатур, 
утрированных примеров, терминов,фраз, допускающих субъективное 
толкование.
6. Невыполнимость - требования, выполнение которых стоит дорого, но 
для конечного пользователя бесполезны; технически нереализуемые 
требования; нереализуемые требования.
7. Непроверяемость - "когда 100 пользователей одновременно нажмут 
кнопку, должно появиться сообщение о предупреждении".
8. Немодифицируемость - требования неатомарны и непрослеживаемы, 
противоречивы, требования представлены в неудобной для обработки форме.

		Уточнение требований
Вопросы. Можно спросить преставителей заказчика, обратиться к 
справочной информации, к более опытным коллегам. 
Требования/Гугл/Вики > коллеги > команда разработчиков > БА/Заказчик.
		Работа с требованиями
1. Тест-кейсы и чек-листы - хорошее требования является проверяемым.
2. Исследование поведения системы - тестированию подвергается не одно 
требование, а целый набор.
3. Рисунки - чтобы увидеть общую картину требований целиком, помогает 
использование схем/диаграмм/рисунков.
		Постановка вопросов
1) вопросы должны быть короткими и простыми
2) не содержат "или"
3) формулировка вопроса должна быть такая, что ответ на него был 
максимально коротким
4) обдумывай ответ, который можно получить
5) предлагая улучшения, подкрепляй фактами и доводами
6) просьбы оформляй вежливыми оборотами

	User story - короткая формулировка намерения пользователя и 
что продукт должен сделать для него.
US применяется для:
1) описания элементов бэклога
2) для лучшего понимая пользователей
3) для описания требований к продукту на понятном для всех языке:
пользователей, разработчиков, другие заинтресованные лица
4) для вовлечения в процесс разработки пользователей
и заинтересованных лиц
	US - ответ на три вопроса, связанные в одно предложение:
1. что за пользователь?
2. какое действие он хочет выполнить в продукте или какой результат
хочет получить?
3. зачем ему это?
Пользовательские истории:
Как <роль или тип пользователя>,
я хочу/могу <выполнить действие или получить результат>,
чтобы <получить ценность>.
Пример: как "новый сотрудник", я хочу "узнать, что такое SCRUM", чтобы "лучше работать в команде".


